// g++ -g3 -ggdb -O0 -DDEBUG -I/usr/include/cryptopp Driver.cpp -o Driver.exe -lcryptopp -lpthread
// g++ -g -O2 -DNDEBUG -I/usr/include/cryptopp Driver.cpp -o Driver.exe -lcryptopp -lpthread

#include "cryptopp/osrng.h"
#include "cryptopp/cryptlib.h"
#include "cryptopp/hmac.h"
#include "cryptopp/sha.h"
#include "cryptopp/hex.h"
#include "cryptopp/filters.h"
#include "cryptopp/secblock.h"

#include <iostream>
#include <string>
#include <cstdlib>

using namespace std;
using namespace CryptoPP;
int main(int argc, char* argv[])
{
	string plain = "<SchedaCompilata><idScheda>7</idScheda><idProcedura>13</idProcedura><tipologiaElezione>0</tipologiaElezione><numeroPreferenze>1</numeroPreferenze><nonce>D5F16DB999DF86FAC308004A5A129FA0</nonce><preferenze><matricolaCandidato>40E2BCFD4DCFA7417448CD232B74FB1A</matricolaCandidato></preferenze></SchedaCompilata>"
			"39B62EBED614A8A79372DEFBDD64AE6B1D87A1D62AB4079234DA60702A9D0A8DA68F40C4949E51BDB18E4CAFB0169BB6935389538F936B8371A106B0914C3FC0E536FC8A9CF614A09F36D268B2624773E3D2DFDC207E70C56026CC6F205F094910A33F6F674EB8B4C466E8820543EE314EEB90E8B951DB121BE332E53228FE8D174772C5FBEAAEE5E6AF53CEEC42030991103AB47E89311B444446B4E6E7E37605483C3920D1F42F5EB57FEB572F0365C3A46D15B56E0C37F3654E2738DA5DCBC1C9926C1BBA8AA75DE76EFBBCE9E43A24556F1B8CFF4FC73F8434D5770349695B5FE65E42F8CFCE7B60ECD85E891781EE74DDC4CAF69C0F8C6D5AA34B46FC6FF0A7437CD7319D32398A3DBD69E45110D16849FAB183F50010B8D93713EA61FF2154E05FE230342C352ABFC27FC34E1EEDEA44C4B11D1764B2EF7B58884E79DC8E3E49928419EA7CBBFCEE6428C2EAB611F191465196B0E6208E63B49A87C92559E3133F45503A08A29E508604FCCDE725C6B10F07B9BF22FC6D4D09C3BB729508047BAB4F0915192539A756B167A08D09164C94E73E780000B7F0705F8AFB736102BCDA8DDE1497AC86439F873D8AAD92524D8B690AC9DDE27AB0CDE573705D22D3EFFDDF03BE0EA533816B2E16F0DB3327CA273314EF15421B0786378537345A52E052D2F21A82623A26E233BDF7510C5C9404A316F956F29A4FB7E7521EA04C17202AD7F57728967072E6C2D3B8C6A06E26F1C656FA784020CAA0914EE22B31E3760778EC7F4A90BB90AC6574DF3CF6B4E84F09E7A53861C77C481B7B199E3823C98414F049DAE2AC122EED1AF88754E869FBB085A8914DBC913CB0A47A9ADD1AF04FEA196EB0B276BF8B45F807787CFB35DEDBC96F48B352A18A644F766E3962ED3DDF37BC7BEB1BF3C736D278AB2373801F4239BA21C0BB100AABFAE212A4A6164EE6C99B25325713CA6F56C59CF17EBAD7E9B9BEF77836CA6F5120EBAE38F571E0B99AA00C318C254A506732B2A3E240373DF0D4F6ADF267848476DD55D91C77E41979F356B1D85AE9A263C7776ACF3203BCBBB40BB234799B653FDA674219399946";


	string encodedSessionKey = "11A47EC4465DD95FCD393075E7D3C4EB";


	cout << "Session key: " << encodedSessionKey << endl;
	string decodedKey;
	StringSource (encodedSessionKey,true,
			new HexDecoder(
					new StringSink(decodedKey)
			) // HexDecoder
	); // StringSource

	SecByteBlock key(reinterpret_cast<const byte*>(decodedKey.data()), decodedKey.size());


	string macCalculated, encoded;

	/*********************************\
	\*********************************/

	// Pretty print key
	encoded.clear();
	StringSource(key, key.size(), true,
		new HexEncoder(
			new StringSink(encoded)
		) // HexEncoder
	); // StringSource
	cout << "key encoded: " << encoded << endl;

	cout << "plain text: " << plain << endl;

	/*********************************\
	\*********************************/

	try
	{
		HMAC< SHA256 > hmac(key, key.size());

		StringSource(plain, true,
			new HashFilter(hmac,
				new StringSink(macCalculated)
			) // HashFilter
		); // StringSource
	}
	catch(const CryptoPP::Exception& e)
	{
		cerr << e.what() << endl;
		exit(1);
	}

	/*********************************\
	\*********************************/

//	// Pretty print MAC
	string macEncoded;
	StringSource(macCalculated, true,
		new HexEncoder(
			new StringSink(macEncoded)
		) // HexEncoder
	); // StringSource
	cout << "hmac encoded: " << macEncoded << endl;

	/*********************************\
	 *
	 *
	 *
	 *
	 *
	 *
	 *inizio verifica
	\*********************************/


	string encodedSessionKey2 = "11A47EC4465DD95FCD393075E7D3C4EB";

	string decodedKey2;
	cout << "Session key: " << encodedSessionKey2 << endl;

	StringSource (encodedSessionKey2,true,
			new HexDecoder(
					new StringSink(decodedKey2)
			) // HexDecoder
	); // StringSource

	SecByteBlock key2(reinterpret_cast<const byte*>(decodedKey2.data()), decodedKey2.size());

	string macDecoded;
	StringSource(macEncoded, true,
		new HexDecoder(
			new StringSink(macDecoded)
		) // HexEncoder
	); // StringSource
	cout << "hmac decoded: " << macDecoded << endl;

	try
	{
		HMAC< SHA256 > hmac(key2, key2.size());
		const int flags = HashVerificationFilter::THROW_EXCEPTION | HashVerificationFilter::HASH_AT_END;

		string toVerify = "<SchedaCompilata><idScheda>7</idScheda><idProcedura>13</idProcedura><tipologiaElezione>0</tipologiaElezione><numeroPreferenze>1</numeroPreferenze><nonce>D5F16DB999DF86FAC308004A5A129FA0</nonce><preferenze><matricolaCandidato>40E2BCFD4DCFA7417448CD232B74FB1A</matricolaCandidato></preferenze></SchedaCompilata>"
			"39B62EBED614A8A79372DEFBDD64AE6B1D87A1D62AB4079234DA60702A9D0A8DA68F40C4949E51BDB18E4CAFB0169BB6935389538F936B8371A106B0914C3FC0E536FC8A9CF614A09F36D268B2624773E3D2DFDC207E70C56026CC6F205F094910A33F6F674EB8B4C466E8820543EE314EEB90E8B951DB121BE332E53228FE8D174772C5FBEAAEE5E6AF53CEEC42030991103AB47E89311B444446B4E6E7E37605483C3920D1F42F5EB57FEB572F0365C3A46D15B56E0C37F3654E2738DA5DCBC1C9926C1BBA8AA75DE76EFBBCE9E43A24556F1B8CFF4FC73F8434D5770349695B5FE65E42F8CFCE7B60ECD85E891781EE74DDC4CAF69C0F8C6D5AA34B46FC6FF0A7437CD7319D32398A3DBD69E45110D16849FAB183F50010B8D93713EA61FF2154E05FE230342C352ABFC27FC34E1EEDEA44C4B11D1764B2EF7B58884E79DC8E3E49928419EA7CBBFCEE6428C2EAB611F191465196B0E6208E63B49A87C92559E3133F45503A08A29E508604FCCDE725C6B10F07B9BF22FC6D4D09C3BB729508047BAB4F0915192539A756B167A08D09164C94E73E780000B7F0705F8AFB736102BCDA8DDE1497AC86439F873D8AAD92524D8B690AC9DDE27AB0CDE573705D22D3EFFDDF03BE0EA533816B2E16F0DB3327CA273314EF15421B0786378537345A52E052D2F21A82623A26E233BDF7510C5C9404A316F956F29A4FB7E7521EA04C17202AD7F57728967072E6C2D3B8C6A06E26F1C656FA784020CAA0914EE22B31E3760778EC7F4A90BB90AC6574DF3CF6B4E84F09E7A53861C77C481B7B199E3823C98414F049DAE2AC122EED1AF88754E869FBB085A8914DBC913CB0A47A9ADD1AF04FEA196EB0B276BF8B45F807787CFB35DEDBC96F48B352A18A644F766E3962ED3DDF37BC7BEB1BF3C736D278AB2373801F4239BA21C0BB100AABFAE212A4A6164EE6C99B25325713CA6F56C59CF17EBAD7E9B9BEF77836CA6F5120EBAE38F571E0B99AA00C318C254A506732B2A3E240373DF0D4F6ADF267848476DD55D91C77E41979F356B1D85AE9A263C7776ACF3203BCBBB40BB234799B653FDA674219399946";

		StringSource(toVerify + macDecoded, true,
			new HashVerificationFilter(hmac, NULL, flags)
		); // StringSource

		cout << "Verified message" << endl;
	}
	catch(const CryptoPP::Exception& e)
	{
		cerr << e.what() << endl;
		exit(1);
	}

	return 0;
}

